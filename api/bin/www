#!/usr/bin/env node

/**
 * Module dependencies.
 */
var config = require('../config.js');
var debug = require('debug')('api:server');
var os = require('os');
var cluster = require('cluster');
/**
 * PGSQL connection retries config:
 */
var pg = require('pg');
var connect_retries = 10;
var connect_retry_timeout = 5000;
var connect_count = 1;

var startServer = function(){


  /**
   * Listen on provided port, on all network interfaces.
   */
  if(cluster.isMaster){
    for(var i=0;i<os.cpus().length; i++){
      cluster.fork();
    }

    cluster.on('online', function (worker) {
      console.log("Worker %d online", worker.id);
    });

    cluster.on('exit', function (worker, code, signal) {
        console.log('Worker %d died (%s). Restarting...', worker.id, signal || code);
        cluster.fork()
    });

  }
  else if(cluster.isWorker){

    var app = require('../app');
    var http = require('http');

    /**
     * Get port from environment and store in Express.
     */
    var port = normalizePort(process.env.PORT || '3000');
    app.set('port', port);

    /**
     * Initialize HTTP server.
     */
    var server = http.createServer(app);

    server.listen(port);
    server.on('error', onError);
    server.on('listening', function() {
      var addr = server.address();
      var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
      debug('Listening on ', bind, "for worker", cluster.worker.id);
    });
  }



}

/**
 * Recursive n retries to connect PGSQL.
 */
var trydb = function(err, client, done) {
  if (!err) {
    console.log("* Connected to PGSQL. Launching Server.");
    startServer();
  } else {
    if (connect_count <= connect_retries) {
      console.log("* Connecting to PGSQL: " + connect_count + "/" + connect_retries + " retries failed. Waiting " + (connect_retry_timeout / 1000) + " seconds...");
      connect_count = connect_count + 1;
      setTimeout(function(){
        pg.connect(config.getData().pgsql, trydb);
      }, connect_retry_timeout);
    } else {
      console.log("*** FATAL EROR: Cannot connect to PGSQL.");
    }
  }
}

var startTimeout = 5000;
//Needs to wait the first time (db shutdown while initial error checking process):
setTimeout(function(){
  pg.connect(config.getData().pgsql, trydb);
}, startTimeout);

console.log("Starting connector...");

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}
